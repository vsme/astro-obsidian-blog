---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import MediaCard from "../components/MediaCard.astro";
import Comments from "@/components/Comments.tsx";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
  summary,
  // keywords,
  // mainPoints,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto mt-4 w-full max-w-app px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
    data-pagefind-weight="5"
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="my-2 flex items-center gap-2">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
      <span
        aria-hidden="true"
        class:list={[
          "max-sm:hidden",
          { hidden: !SITE.editPost.enabled || hideEditPost },
        ]}>|</span
      >
      <EditPost {hideEditPost} {post} class="max-sm:hidden" />
    </div>

    {
      summary && (
        <div class="mt-6 mb-8 rounded-lg border border-purple-500/10 bg-gradient-to-br from-purple-500/20 via-purple-500/5 to-blue-500/10 p-4 font-sans shadow-[inset_0_2px_6px_rgba(0,0,0,0.05)] selection:bg-purple-800/40 dark:selection:bg-purple-200/50">
          <div class="mb-3 flex items-center gap-2">
            <svg class="h-5 w-5" fill="url(#starGradient)" viewBox="0 0 24 24">
              <defs>
                <linearGradient
                  id="starGradient"
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" style="stop-color:#e0abff" />
                  <stop offset="100%" style="stop-color:#7a43d8" />
                </linearGradient>
              </defs>
              <path d="M12 2L9.1 9.1 2 12l7.1 2.9L12 22l2.9-7.1L22 12l-7.1-2.9z" />
              <path
                fill="url(#starGradient)"
                transform="translate(16, 0) scale(0.4)"
                d="M12 2L9.1 9.1 2 12l7.1 2.9L12 22l2.9-7.1L22 12l-7.1-2.9z"
              />
            </svg>
            <h3 class="bg-gradient-to-r from-purple-400 to-purple-600 bg-clip-text text-lg font-bold text-transparent">
              AI 总结
            </h3>
          </div>

          {summary && (
            <p class="text-sm leading-relaxed text-foreground/80">{summary}</p>
          )}
        </div>
      )
    }

    <article
      id="article"
      class="app-prose relative mx-auto mt-8 max-w-app prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
    >
      <Content components={{ MediaCard }} />
    </article>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    <ShareLinks />

    {SITE.comments.enabled && <Comments client:only="react" />}

    <hr
      class={`my-6 ${SITE.comments.enabled ? "border-none" : "border-dashed"}`}
    />

    <!-- 移动端悬浮目录按钮 -->
    <button
      id="mobile-toc-button"
      class="sticky bottom-10 left-5 z-50 flex h-11 w-11 items-center justify-center rounded-full border border-border bg-background text-foreground shadow-lg transition-all duration-300 hover:scale-110 xl:hidden"
      aria-label="打开目录"
    >
      <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
        <path d="M3 4h18v2H3zm0 5h18v2H3zm0 5h18v2H3z"></path>
      </svg>
    </button>

    <BackToTopButton />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={getPath(prevPost.id, prevPost.filePath)}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none rtl:rotate-180" />
            <div>
              <span>上一篇</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={getPath(nextPost.id, nextPost.filePath)}
            class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>下一篇</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none rtl:rotate-180" />
          </a>
        )
      }
    </div>
  </main>

  <!-- 移动端目录弹出层 -->
  <div id="mobile-toc-overlay" class="mobile-toc-overlay"></div>
  <div id="mobile-toc-panel" class="mobile-toc-panel">
    <div class="toc-header">
      <h3>目录</h3>
      <button id="mobile-toc-close" class="close-btn" aria-label="关闭目录">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path
            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
          ></path>
        </svg>
      </button>
    </div>
    <div class="toc-content">
      <ul id="mobile-toc-list">
        <!-- 目录内容将通过JavaScript动态生成 -->
      </ul>
    </div>
  </div>

  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () => {
    window.scrollTo({ left: 0, top: 0, behavior: "instant" });
  });
</script>

<script>
  document.addEventListener("astro:page-load", () => {
    /** Create a progress indicator
     *  at the top */
    function createProgressBar() {
      // Create the main container div
      const progressContainer = document.createElement("div");
      progressContainer.className =
        "progress-container fixed top-0 z-10 h-1 w-full bg-background";

      // Create the progress bar div
      const progressBar = document.createElement("div");
      progressBar.className = "progress-bar h-1 w-0 bg-accent/15";
      progressBar.id = "myBar";

      // Append the progress bar to the progress container
      progressContainer.appendChild(progressBar);

      // Append the progress container to the document body or any other desired parent element
      document.body.appendChild(progressContainer);
    }

    /** Update the progress bar
     *  when user scrolls */
    function updateScrollProgress() {
      document.addEventListener("scroll", () => {
        const winScroll =
          document.body.scrollTop || document.documentElement.scrollTop;
        const height =
          document.documentElement.scrollHeight -
          document.documentElement.clientHeight;
        const scrolled = (winScroll / height) * 100;
        if (document) {
          const myBar = document.getElementById("myBar");
          if (myBar) {
            myBar.style.width = scrolled + "%";
          }
        }
      });
    }

    /** 为代码块添加复制按钮 */
    function addCopyButtons() {
      const preElements = document.querySelectorAll("pre");

      // 使用 DocumentFragment 批量处理 DOM 操作
      const elementsToProcess: {
        pre: HTMLPreElement;
        parent: Node;
        nextSibling: Node | null;
      }[] = [];

      preElements.forEach(pre => {
        // 检查是否已经被包装过（即已经有复制按钮）
        if (
          pre.parentElement?.tagName === "DIV" &&
          pre.parentElement?.style.position === "relative" &&
          pre.parentElement?.querySelector('[data-copy-button="true"]')
        ) {
          return;
        }

        // 记录需要处理的元素信息
        const parent = pre.parentNode;
        const nextSibling = pre.nextSibling;
        if (parent) {
          elementsToProcess.push({ pre, parent, nextSibling });
        }
      });

      // 批量创建包装器和按钮
      elementsToProcess.forEach(({ pre, parent, nextSibling }) => {
        // 添加 tabindex 属性
        pre.setAttribute("tabindex", "0");

        // 创建包装器
        const wrapper = document.createElement("div");
        wrapper.style.position = "relative";

        // 创建复制按钮
        const copyButton = document.createElement("button");
        copyButton.className = [
          "copy-code",
          "absolute",
          "end-3",
          "-top-3",
          "rounded",
          "bg-muted",
          "border",
          "border-muted/30",
          "hover:border-muted/60",
          "hover:bg-muted/80",
          "px-2",
          "py-1",
          "text-xs",
          "leading-4",
          "text-foreground",
          "font-medium",
          "transition-colors",
          "duration-200",
        ].join(" ");
        copyButton.setAttribute("data-copy-button", "true");
        copyButton.setAttribute("type", "button");
        copyButton.textContent = "Copy";

        // 添加点击事件
        copyButton.addEventListener("click", async () => {
          const code = pre.querySelector("code");
          const text = code?.textContent || code?.innerText || "";

          try {
            await navigator.clipboard.writeText(text);

            // 视觉反馈
            const originalText = copyButton.textContent;
            copyButton.textContent = "Copied";

            setTimeout(() => {
              copyButton.textContent = originalText;
            }, 700);
          } catch {
            // console.error("Failed to copy code:", err);
          }
        });

        wrapper.appendChild(pre);
        wrapper.appendChild(copyButton);

        // 一次性插入到 DOM 中
        parent.insertBefore(wrapper, nextSibling);
      });
    }

    createProgressBar();
    updateScrollProgress();
    addCopyButtons();

    // 移动端目录功能
    function initMobileToc(
      tocLinks: (HTMLAnchorElement & { urlHash: string })[]
    ) {
      const mobileButton = document.getElementById("mobile-toc-button");
      const mobileOverlay = document.getElementById("mobile-toc-overlay");
      const mobilePanel = document.getElementById("mobile-toc-panel");
      const mobileClose = document.getElementById("mobile-toc-close");
      const mobileTocList = document.getElementById("mobile-toc-list");

      // 如果没有目录链接，隐藏移动端按钮
      if (!tocLinks || tocLinks.length === 0) {
        if (mobileButton) mobileButton.style.display = "none";
        return;
      }

      // 生成移动端目录内容
      if (mobileTocList) {
        mobileTocList.innerHTML = "";
        tocLinks.forEach(link => {
          const li = document.createElement("li");
          const a = document.createElement("a");
          a.href = link.href;
          a.textContent = link.textContent;
          a.className = link.className;

          // 获取标题级别并设置data-level属性
          const headingLevel = getHeadingLevel(link);
          li.setAttribute("data-level", headingLevel.toString());

          // 添加点击事件，点击后关闭移动端目录
          a.addEventListener("click", () => {
            closeMobileToc();
          });

          li.appendChild(a);
          mobileTocList.appendChild(li);
        });
      }

      // 获取标题级别的辅助函数
      function getHeadingLevel(link: HTMLAnchorElement): number {
        const href = link.getAttribute("href");
        if (!href) return 1;

        const targetId = href.slice(1);
        const targetElement = document.getElementById(
          decodeURIComponent(targetId)
        );

        if (targetElement) {
          const tagName = targetElement.tagName.toLowerCase();
          if (tagName.match(/^h[1-6]$/)) {
            return parseInt(tagName.charAt(1));
          }
        }

        return 1;
      }

      // 打开移动端目录
      function openMobileToc() {
        if (mobileOverlay && mobilePanel) {
          mobileOverlay.classList.add("active");
          mobilePanel.classList.add("active");
        }
      }

      // 关闭移动端目录
      function closeMobileToc() {
        if (mobileOverlay && mobilePanel) {
          mobileOverlay.classList.remove("active");
          mobilePanel.classList.remove("active");
        }
      }

      // 绑定事件
      if (mobileButton) {
        mobileButton.addEventListener("click", openMobileToc);
      }

      if (mobileClose) {
        mobileClose.addEventListener("click", closeMobileToc);
      }

      if (mobileOverlay) {
        mobileOverlay.addEventListener("click", closeMobileToc);
      }
    }

    const tocLinks: (HTMLAnchorElement & { urlHash: string })[] = Array.from(
      document.querySelectorAll(".article-toc-nav a")
    );

    // 初始化移动端目录功能
    initMobileToc(tocLinks);

    if (tocLinks.length === 0) return;

    tocLinks[0].classList.add("active");
    tocLinks.forEach(a => (a.urlHash = new URL(a.href).hash));

    const sections = tocLinks
      .map(link => {
        const id = decodeURIComponent(
          (link.getAttribute("href") || "").slice(1)
        );
        return document.getElementById(id);
      })
      .filter(Boolean);

    // IntersectionObserver
    const io = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            tocLinks.forEach(a => a.classList.remove("active"));
            const id = entry.target.id;
            tocLinks
              .find(a => a.urlHash === `#${encodeURIComponent(id)}`)
              ?.classList.add("active");
          }
        });
      },
      {
        rootMargin: `0px 0px -89% 0px`,
        threshold: 0,
      }
    );

    sections.forEach(sec => sec && io.observe(sec));
  });
</script>
